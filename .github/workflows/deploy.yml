name: Build, Push and Deploy

on:
  push:
    tags:
      - 'v*'
      - 'infra-v*'  # For infrastructure provisioning
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: photo-sense-prod
  ECS_CLUSTER: photosense-prod
  ECS_SERVICE: photosense-prod
  ECS_TASK_DEFINITION: photosense-prod
  CONTAINER_NAME: photo-sense
  TF_STATE_BUCKET: photosense-terraform-state

jobs:
  application:
    name: Photo Sense Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run linting
        run: npm run lint || true

  check-tag:
    name: Check if Tag is Present
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      has_tag: ${{ steps.check-tag.outputs.has_tag }}
      tag_name: ${{ steps.check-tag.outputs.tag_name }}
      is_infra_tag: ${{ steps.check-tag.outputs.is_infra_tag }}
      run_terraform: ${{ steps.check-tag.outputs.run_terraform }}
    steps:
      - name: Check for tag
        id: check-tag
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
            echo "has_tag=true" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG" >> $GITHUB_OUTPUT
            echo "Tag detected: $TAG"
            
            # Check if it's an infrastructure tag
            if [[ $TAG == infra-v* ]]; then
              echo "is_infra_tag=true" >> $GITHUB_OUTPUT
              echo "run_terraform=true" >> $GITHUB_OUTPUT
              echo "Infrastructure tag detected - will run Terraform"
            else
              echo "is_infra_tag=false" >> $GITHUB_OUTPUT
              echo "run_terraform=false" >> $GITHUB_OUTPUT
              echo "Application tag detected - will skip Terraform"
            fi
          else
            echo "has_tag=false" >> $GITHUB_OUTPUT
            echo "run_terraform=false" >> $GITHUB_OUTPUT
            echo "No tag detected. Pipeline will fail at build stage."
          fi

  terraform-provision:
    name: Terraform Infrastructure Provisioning
    needs: [check-tag]
    runs-on: ubuntu-latest
    # Only run if explicitly requested via tag
    if: needs.check-tag.outputs.run_terraform == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Create secure tfvars file
        working-directory: ./terraform
        run: |
          # Create a secure tfvars file with sensitive values from GitHub secrets
          cat > terraform.auto.tfvars <<EOF
          app_name                 = "photosense"
          aws_region               = "us-east-1"
          aws_access_key           = "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws_secret_key           = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws_account_id           = "${{ secrets.NEXT_AWS_ACCOUNT_ID }}"
          ecr_repository_name      = "photo-sense"
          aws_environment          = "prod"
          s3_bucket_name           = "photosense-media"
          vpc_name                 = "photosense"
          vpc_cidr                 = "10.0.0.0/16"
          vpc_public_subnet_cidrs  = ["10.0.1.0/24", "10.0.2.0/24"]
          vpc_private_subnet_cidrs = ["10.0.10.0/24", "10.0.11.0/24"]
          vpc_azs                  = ["us-east-1a", "us-east-1b"]
          ecs_task_cpu             = 2048
          ecs_task_memory          = 4096
          ecs_container_name       = "photo-sense"
          ecs_container_port       = 3000
          ecs_container_image_tag  = "${{ needs.check-tag.outputs.tag_name }}"
          ecs_container_environment = [
            {
              name  = "NODE_ENV"
              value = "production"
            }
          ]
          ecs_desired_count                     = 1
          ecs_health_check_path                 = "/api/health"
          image_metadata_dynamodb_table_name    = "ImageMetadata"
          image_metadata_dynamodb_hash_key      = "ImageId"
          image_metadata_dynamodb_hash_key_type = "S"
          user_details_dynamodb_table_name      = "UserDetails"
          user_details_dynamodb_hash_key        = "Email"
          user_details_dynamodb_hash_key_type   = "S"
          notifications_dynamodb_table_name     = "PhotoSense-Notifications"
          notifications_dynamodb_hash_key       = "UserId"
          notifications_dynamodb_hash_key_type  = "S"
          notifications_dynamodb_range_key      = "NotificationId"
          notifications_dynamodb_range_key_type = "S"
          tags = {
            Project     = "PhotoSense"
            Application = "PhotoSense"
            Service     = "PhotoSenseService"
            Environment = "prod"
            Owner       = "DevOps"
            Team        = "Backend"
            Contact     = "kandarp.canada@gmail.com"
            ManagedBy   = "Terraform"
            Monitoring  = "enabled"
            Name        = "photo-sense"
          }
          lambda_function_name                 = "s3-trigger-lambda"
          lambda_function_handler_name         = "index.handler"
          lambda_function_s3_folder_watch_name = "users/"
          lambda_environment_vars = {
            DYNAMODB_TABLE_NAME      = "ImageMetadata"
            NOTIFICATIONS_TABLE_NAME = "PhotoSense-Notifications"
            SQS_QUEUE_PREFIX         = "user-notify-"
          }
          # Using your existing Supabase credentials
          # You'll need to add SUPABASE_PROJECT_ID as a new secret
          supabase_project_id   = "ieplmkmrqwwvixexjwhh"  # Hardcoded from your tfvars
          supabase_access_token = "${{ secrets.SUPABASE_ACCESS_TOKEN }}"
          EOF
          
          # Print non-sensitive parts of the file to verify
          echo "Created terraform.auto.tfvars with the following non-sensitive values:"
          grep -v "aws_access_key\|aws_secret_key\|supabase_access_token" terraform.auto.tfvars
      
      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=photosense/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"
      
      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate
      
      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan
      
      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

  build-and-push:
    name: Build and Push to ECR
    needs: [application, check-tag, terraform-provision]
    runs-on: ubuntu-latest
    # Run if it's a tag and either terraform was skipped or completed successfully
    if: |
      needs.check-tag.outputs.has_tag == 'true' && 
      (needs.check-tag.outputs.run_terraform == 'false' || success())
    outputs:
      image: ${{ steps.set-image.outputs.image }}
      tag_name: ${{ needs.check-tag.outputs.tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.check-tag.outputs.tag_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_AWS_REGION=${{ secrets.NEXT_PUBLIC_AWS_REGION }}
            NEXT_PUBLIC_AWS_BUCKET_NAME=${{ secrets.NEXT_PUBLIC_AWS_BUCKET_NAME }}
            NEXT_PUBLIC_AWS_ACCOUNT_ID=${{ secrets.NEXT_PUBLIC_AWS_ACCOUNT_ID }}
      
      - name: Set image output
        id: set-image
        run: echo "image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.check-tag.outputs.tag_name }}" >> $GITHUB_OUTPUT

  deploy-to-ecs:
    name: Deploy to ECS
    needs: [build-and-push, check-tag]
    runs-on: ubuntu-latest
    if: needs.check-tag.outputs.has_tag == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json
      
      # Debug step to check what's being passed
      - name: Debug image value
        run: |
          echo "Image value from previous job: ${{ needs.build-and-push.outputs.image }}"
          echo "Tag name: ${{ needs.build-and-push.outputs.tag_name }}"
      
      # Directly construct the image URI if the output isn't working
      - name: Set image URI
        id: image-uri
        run: |
          REGISTRY_ID=$(aws ecr describe-registry --query registryId --output text)
          IMAGE_URI="${REGISTRY_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ needs.build-and-push.outputs.tag_name }}"
          echo "image=${IMAGE_URI}" >> $GITHUB_OUTPUT
          echo "Using image: ${IMAGE_URI}"
      
      - name: Update environment variables in task definition
        run: |
          # First, let's check the structure of the task definition
          cat task-definition.json | jq '.containerDefinitions'
          
          # Then update the environment variables with a more robust approach
          jq 'if .containerDefinitions[0].environment then 
                .containerDefinitions[0].environment += [
                  {"name": "NEXT_PUBLIC_SUPABASE_URL", "value": "${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}"},
                  {"name": "NEXT_PUBLIC_SUPABASE_ANON_KEY", "value": "${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}"},
                  {"name": "NEXT_AWS_ACCESS_KEY_ID", "value": "${{ secrets.NEXT_AWS_ACCESS_KEY_ID }}"},
                  {"name": "NEXT_AWS_SECRET_ACCESS_KEY", "value": "${{ secrets.NEXT_AWS_SECRET_ACCESS_KEY }}"},
                  {"name": "NEXT_PUBLIC_AWS_REGION", "value": "${{ secrets.NEXT_PUBLIC_AWS_REGION }}"},
                  {"name": "NEXT_PUBLIC_AWS_BUCKET_NAME", "value": "${{ secrets.NEXT_PUBLIC_AWS_BUCKET_NAME }}"},
                  {"name": "NEXT_PUBLIC_AWS_ACCOUNT_ID", "value": "${{ secrets.NEXT_PUBLIC_AWS_ACCOUNT_ID }}"},
                  {"name": "NEXT_SUPABASE_SERVICE_ROLE_KEY", "value": "${{ secrets.NEXT_SUPABASE_SERVICE_ROLE_KEY }}"}
                ] 
              else 
                .containerDefinitions[0] += {"environment": [
                  {"name": "NEXT_PUBLIC_SUPABASE_URL", "value": "${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}"},
                  {"name": "NEXT_PUBLIC_SUPABASE_ANON_KEY", "value": "${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}"},
                  {"name": "NEXT_AWS_ACCESS_KEY_ID", "value": "${{ secrets.NEXT_AWS_ACCESS_KEY_ID }}"},
                  {"name": "NEXT_AWS_SECRET_ACCESS_KEY", "value": "${{ secrets.NEXT_AWS_SECRET_ACCESS_KEY }}"},
                  {"name": "NEXT_PUBLIC_AWS_REGION", "value": "${{ secrets.NEXT_PUBLIC_AWS_REGION }}"},
                  {"name": "NEXT_PUBLIC_AWS_BUCKET_NAME", "value": "${{ secrets.NEXT_PUBLIC_AWS_BUCKET_NAME }}"},
                  {"name": "NEXT_PUBLIC_AWS_ACCOUNT_ID", "value": "${{ secrets.NEXT_PUBLIC_AWS_ACCOUNT_ID }}"},
                  {"name": "NEXT_SUPABASE_SERVICE_ROLE_KEY", "value": "${{ secrets.NEXT_SUPABASE_SERVICE_ROLE_KEY }}"}
                ]}
              end' task-definition.json > updated-task-definition.json
          mv updated-task-definition.json task-definition.json
      
      - name: Update task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.image-uri.outputs.image }}
      
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  fail-if-no-tag:
    name: Fail Pipeline if No Tag
    needs: [check-tag]
    runs-on: ubuntu-latest
    if: needs.check-tag.outputs.has_tag != 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Fail workflow
        run: |
          echo "Error: No tag detected. This pipeline only runs when a tag is present."
          exit 1